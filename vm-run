#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-only
#
# vm-run: Run command under QEMU emulated root
#
# Copyright (C) 2019-2022 Vitaly Chikunov <vt@altlinux.org>
#

set -efu

# Save original env first
SCRIPT=$(mktemp)
( LOGNAME=root
  USER=root
  declare -fx
  export ) > $SCRIPT

# Additional options to qemu run
OPTS=
APPEND=
NOCMD=
type time >/dev/null 2>&1 && TIME=time || TIME=
SBIN=
VERBOSE=
QUIET=quiet	# no boot messages
DEF=
MAXMEM=
MAXCPU=
DEPMOD=
BIOS=
KVM=try		# try to use kvm by default
VIRTIOBUS=pci	# virtio bus to use
ARMH_KVM_OK=/usr/bin/qemu-system-aarch64-bundle-kvm-ok
SANDBOX=on,spawn=deny
MULTIDEVS=remap
MODULES=
ROOTFS_DEF_IMAGE=/tmp/vm-ext4.img
ROOTFS=
ROOTFSCREATE=
NOBIND=
DRIVE_IF=virtio
FAKESUDO=
RUNUSER=

usage() {
	echo "Usage: $(basename $0) [OPTIONS...] [COMMAND...]"
	echo "Run COMMAND in VM booted kernel."
	echo
	echo "QEMU options:"
	echo "    --bios=          Use particular firmware (ex. uefi)"
	echo "    --cpu=           Pass '-smp ...' to qemu (cpus)"
	echo "    --drive=         Shortcut to pass '-drive file=' to qemu"
	echo "    --fat=DIR        Shortcut to pass DIR as rw FAT partition"
	echo "    --kvm=cond       Only run if KVM is present otherwise exit 0"
	echo "    --mem=           Pass '-m ...' to qemu (memory size)"
	echo "    --microvm        Use microvm machine type"
	echo "    --multidevs=     9p multidevs mode (remap, forbid, warn)"
	echo "    --overlay=FS[,SIZE=][:PATH]"
       	echo "                     Auto create overlay FS over PATH"
	echo "    --qemu='...'     Pass additional options to qemu"
	echo "    --rootfs=IMAGE   Use existing ext4 IMAGE for rootfs instead of 9p"
	echo "                     To generate new image use --create-rootfs=IMAGE"
	echo "                     or vm-create-image tool."
	echo "    --secureboot     Use OVMF SecureBoot fw (alias --bios=secureboot)"
	echo "    -s, --silent     Do not show qemu command"
	echo "    --tcg            Do not try to enable KVM"
	echo "    --uefi           Use OVMF UEFI firmware (alias --bios=uefi)"
	echo "Kernel options:"
	echo "    --append='...'   Append to kernel cmdline"
	echo "    --depmod         Auto-depmod %buildroot installed kernel"
	echo "    --kernel=        Kernel version to use (--kernels to list)"
	echo "    --no-quiet       Do not boot kernel too quietly"
	echo "Boot options:"
	echo "    --no-bind        Don't bind mount /usr/src from 9p (in rootfs mode)"
	echo "    --sbin           Append sbin dirs to the PATH"
	echo "    --sudo           Install fake sudo into rootfs (implies --rootfs)"
	echo "    --user           Run under user instead of root (implies --sudo)"
	echo "    --udevd          Start udevd"
	echo # Other options
	echo "    -h, --help       This help"
	echo "    --verbose        Show vm actions verbosely"
	echo "    --               No options after this marker"
	echo "    command...       Will be eval'ed on the target"
	exit 1
}

for opt do
	shift
	case "$opt" in
		-h|--help)   usage ;;
		-s|--silent) NOCMD=y TIME= ;;
		--verbose)   VERBOSE=1 APPEND+=" VERBOSE" ;;
		--no-quiet)  QUIET= ;;
		--sbin)      SBIN=y ;;
		--udevd)     APPEND+=" UDEVD=y" ;;
		--qemu=*)    OPTS+=" ${opt#*=}" ;;
		--append=*)  APPEND+=" ${opt#*=}" ;;
		--drive=*)   OPTS+=" -drive file=${opt#*=}" ;;
		--fat=*)     OPTS+=" -drive format=raw,file=fat:rw:${opt#*=}" ;;
		--overlay=*) APPEND+=" OVERLAY=${opt#*=}" ;;
		--uefi)	     BIOS=uefi ;;
		--secureboot) BIOS=secureboot ;;
		--bios=*)    BIOS="${opt#*=}" ;;
		--tcg)	     KVM= ;;
		--kvm=*)     KVM="${opt#*=}" ;;
		--microvm)   VIRTIOBUS=device OPTS+=" -M microvm" BIOS=microvm ;;
		--machine=*) OPTS+=" -machine ${opt#*=}" ;;
		--global=*)  OPTS+=" -global ${opt#*=}" ;;
		--object=*)  OPTS+=" -object ${opt#*=}" ;;
		--device=*)  OPTS+=" -device ${opt#*=}" ;;
		--drive=*)   OPTS+=" -drive ${opt#*=}" ;;
		--blockdev=*)OPTS+=" -blockdev ${opt#*=}" ;;
		--netdev=*)  OPTS+=" -netdev ${opt#*=}" ;;
		--chardev=*) OPTS+=" -chardev ${opt#*=}" ;;
		--sandbox=*) SANDBOX=${opt#*=} ;;
		--mem=*)     OPTS+=" -m ${opt#*=}" ;;
		--cpu=*)     NPROC="${opt#*=}" ;;
		--kernel=*)  KERNEL="${opt#*=}" ;;
		--kernel*)   KERNEL= ;;
		--depmod)    DEPMOD=y ;;
		--loglevel=*) LOGLEVEL="${opt#*=}" ;;
		--multidevs=*) MULTIDEVS="${opt#*=}" ;;
		--modules=*) MODULES+=" ${opt#*=}" ;;
		--create-rootfs=*) ROOTFS="${opt#*=}"; ROOTFSCREATE=y ;;
		--rootfs=*)        ROOTFS="${opt#*=}" ;;
		--rootfs)          ROOTFS=$ROOTFS_DEF_IMAGE ;;
		--no-bind)   NOBIND=y ;;
		--no-virtio) DRIVE_IF= ;;
		--scsi)      DRIVE_IF=scsi ;;
		--sudo)      FAKESUDO=y ;;
		--user)      RUNUSER=builder ;;
		--) break ;;
		-*) echo "Unknown option $opt $*" >&2; usage ;;
		*)  set -- "$opt" "$@"; break ;;
	esac
done

# If no command run shell
if [ -z "$*" ]; then
	set bash
	SBIN=y
fi

# If we already have root just run the command
if [ $(env - whoami) = root ]; then
	exec "$@"
	exit
fi

# Signal to vm-init that we don't have tty on stdin,
# so it will not try to determine terminal size
if [ ! -t 0 ]; then
	APPEND+=" NOTTY"
fi

# libfakeroot tries to communicate with faked and hangs.
[ -v LD_PRELOAD ] && echo 'unset LD_PRELOAD' >> $SCRIPT
# Prepare env
[ $SBIN ] && echo "PATH=/sbin:/usr/sbin:\$PATH" >> $SCRIPT
# Because 9p cannot handle redirection from deleted files and as
# a consequence cannot handle here-documents move TMPDIR to tmpfs
if [ -v TMPDIR ] && [ "$TMPDIR" = '/usr/src/tmp' ]; then
	printf "TMPDIR=/tmp\n" >> $SCRIPT
fi
printf "cd %q\n" "$PWD" >> $SCRIPT
printf "eval" >> $SCRIPT
printf  " %q" "$@" >> $SCRIPT
printf  "\n" >> $SCRIPT
# Flush console.
printf  "RET=\$?\nstty sane\nexit \$RET\n" >> $SCRIPT
chmod a+rx $SCRIPT

kvm_ok() {
	if [ -c /dev/kvm -a -w /dev/kvm ]; then
		if [ "$HOSTTYPE" = "aarch32" ] &&
			[ -x $ARMH_KVM_OK ]; then
			$ARMH_KVM_OK
		else
			true < /dev/kvm
		fi
	else
		false
	fi 2>/dev/null
}

kvm_need() {
	case "$KVM" in
		no|off|false|tcg|"") false ;;
		*) true ;;
	esac
}

ppc_opts() {
	# Use `power8' and not `host', because we will transparently
	# fallback from kvm to tcg. All following options will not
	# break fallback to tcg.
	echo -n " -M cap-ibs=broken,cap-cfpc=broken,cap-sbbc=broken"
	echo -n " -cpu power8"
	if kvm_need && kvm_ok; then
		# In absence of `/usr/sbin/ppc64_cpu' determine SMT by presence
		# online cores 1-7, (while cores 0,8,.. is not SMT cores.)
		if grep -q -P '^processor\s+:\s[1234567]$' /proc/cpuinfo; then
			# If SMT enabled use slower PR (problem state) KVM.
			echo " -M kvm-type=PR"
		else
			# KVM HV is faster, but incompatible with SMT.
			echo " -M kvm-type=HV,cap-ccf-assist=off"
		fi
	else
		# KVM doesn't support this.
		echo -n ",compat=power7"
	fi
}

# Special case for aarch64 host running in aarch32 personality.
if [ "$HOSTTYPE" = "armh" ] &&
	kvm_need &&
	[ -x $ARMH_KVM_OK ] &&
	$ARMH_KVM_OK; then
	HOSTTYPE=aarch32
fi

case "$HOSTTYPE" in
	powerpc64le)
		PACKAGE=qemu-system-ppc-core
		CONSOLE=hvc0
		QEMU=qemu-system-ppc64
		OPTS+=$(ppc_opts)
		# Avoid `CPU time limit exceeded'
		MAXMEM=32768
		MAXCPU=8
		;;
	aarch64)
		PACKAGE=qemu-system-aarch64-core
		CONSOLE=ttyAMA0
		QEMU=qemu-system-aarch64
		# Values that can work well both for kvm and tcg
		OPTS+=" -M virt,gic-version=3 -cpu max"
		# More cpu and memory is slower launch, so limit them
		# to sane big values
		MAXMEM=4096
		MAXCPU=8
		EDK2=/usr/share/AAVMF
		EFI_CODE=QEMU_EFI.fd
		;;
	aarch32)
		PACKAGE=qemu-system-aarch64-bundle-core
		CONSOLE=ttyAMA0
		QEMU=qemu-system-aarch64-bundle
		OPTS+=" -M virt,highmem=off -cpu host,aarch64=off"
		APPEND+=" watchdog_thresh=60"
		MAXMEM=3072
		MAXCPU=6
		;;
	armh)
		PACKAGE=qemu-system-arm-core
		CONSOLE=ttyAMA0
		QEMU=qemu-system-arm
		OPTS+=" -M virt,highmem=off -cpu max"
		APPEND+=" watchdog_thresh=60"
		MAXMEM=2047
		MAXCPU=4
		;;
	i586)
		PACKAGE=qemu-system-x86-core
		CONSOLE=ttyS0
		QEMU=qemu-system-i386
		MAXMEM=1536
		;;
	x86_64)
		PACKAGE=qemu-system-x86-core
		CONSOLE=ttyS0
		QEMU=qemu-system-x86_64
		EDK2=/usr/share/OVMF
		EFI_CODE=OVMF_CODE.fd
		SB_PFLASH="OVMF_CODE.secboot.fd OVMF_VARS.secboot.fd"
		;;
	*)
		echo "Error: architecture $HOSTTYPE is unknown." >&2
		exit 1
esac

case "$HOSTTYPE" in
	i586|x86_64)
		APPEND+=" no_timer_check" ;;
esac

# Set up BIOS.
if [ "$BIOS" = "uefi" ]; then
	if [ -n "${EFI_CODE-}" ]; then
		OPTS+=" -bios $EDK2/$EFI_CODE"
	else
		echo "Error: UEFI is not available for this platform." >&2
		exit 1
	fi
elif [ "$BIOS" = "secureboot" ]; then
	if [ -n "${SB_PFLASH-}" ]; then
		OPTS+=" -global ICH9-LPC.disable_s3=1 -M q35,smm=on"
		OPTS+=" -global driver=cfi.pflash01,property=secure,value=on"
		for f in ${SB_PFLASH-}; do
			OPTS+=" -drive file=$EDK2/$f,if=pflash,format=raw,readonly"
		done
	else
		echo "Error: Secure Boot is not available for this platform." >&2
		exit 1
	fi
elif [ "$BIOS" = "microvm" ]; then
	OPTS+=" -bios bios-microvm.bin"
elif [ -f "/usr/share/qemu/$BIOS" ]; then
	OPTS+=" -bios $BIOS"
elif [ -n "$BIOS" ]; then
	OPTS+=" -bios $BIOS"
elif [ -e /usr/share/qemu/bios.bin ]; then
	# x86 BIOS that doesn't clear screen unlike default bios-256k.bin
	OPTS+=" -bios bios.bin"
fi

if kvm_need; then
	case "$KVM" in
		try|detect)
			# Avoid qemu warning:
			#   Could not access KVM kernel module: No such file or directory
			#   qemu-system-x86_64: failed to initialize kvm: No such file or directory
			#   qemu-system-x86_64: falling back to tcg
			kvm_ok && DEF+=" -M accel=kvm:tcg" || DEF+=" -M accel=tcg"
			;;
		cond|if)
			if ! kvm_ok; then
				echo "Warning: Not running due to no KVM support (exit 0)."
				exit 0
			fi
			DEF+=" -enable-kvm"
			;;
		only|force|enable)
			DEF+=" -enable-kvm"
			;;
		any|all)
			DEF+=" -M accel=kvm:tcg"
			;;
		default)
			;;
		*)
			echo "Error: Unknown --kvm=$KVM option."
			exit 1
			;;
	esac
else
	# Forcefully disable KVM.
	DEF+=" -accel tcg"
fi
unset KVM

if ! mountpoint -q /proc; then
	echo >&2 "  Warning: /proc is not mounted!"
	echo >&2 "  Try to enter hasher with: hsh-shell --mountpoints=/proc,/dev/kvm"
fi

if [ -e /proc/meminfo ]; then
        M=$(grep MemAvailable: /proc/meminfo)
        M=${M##MemAvailable: }
        M=${M%% kB}
        M=$(($M / 1024))
	if [ "$MAXMEM" ] && [ "$M" -gt "$MAXMEM" ]; then
		M=$MAXMEM
	fi
else
        M=256

fi
# Round to 256M for ppc
[ "$HOSTTYPE" = powerpc64le ] && M=$((M / 256 * 256))
if [ $M -ge 256 ]; then
        DEF+=" -m ${M}M"
fi

[ -v NPROC ] || NPROC=$(nproc)
if [ "$NPROC" -gt 1 ]; then
	if [ "$MAXCPU" ] && [ "$NPROC" -gt "$MAXCPU" ]; then
		NPROC=$MAXCPU
	fi
	DEF+=" -smp cores=$NPROC"
fi

# Enable sandbox
if [ -n "$SANDBOX" ] && [ "$SANDBOX" != "off" ]; then
	OPTS="-sandbox $SANDBOX $OPTS"
fi

if [ -e /proc/net/dev ] && [ $(wc -l < /proc/net/dev) -gt 3 ]; then
	DEF+=" -nic user,model=virtio-net-pci"
	if type ip >/dev/null 2>&1; then
		:
	elif type ifconfig >/dev/null 2>&1; then
		:
	else
		echo "Warning: To use share_network inside vm-run you may" >&2
		echo "  need to hsh-install iproute2 or net-tools" >&2
	fi
fi

if [ -n "$RUNUSER" ]; then
	printf "#  CMD: RUNUSER=$RUNUSER\n" >> $SCRIPT
	FAKESUDO=y
fi

if [ -n "$FAKESUDO" ]; then
	if [ -z "$ROOTFS" ]; then
		ROOTFS=$ROOTFS_DEF_IMAGE
		[ -e "$ROOTFS" ] || ROOTFSCREATE=auto
	fi
	printf '#  CMD: FAKESUDO=y\n' >> $SCRIPT
fi

if [ -n "$ROOTFS" ]; then
	ROOTFSFILE=${ROOTFS%,*}
	[ -z "$ROOTFSCREATE" ] || vm-create-image "$ROOTFSFILE" $([[ "$ROOTFS" =~ qcow2 ]] && echo --qcow2)
	FORMAT=$(qemu-img info "$ROOTFSFILE" | grep -Po 'file format: \K.*')
	if [ "$FORMAT" = "qcow2" ]; then
		tmpfile=$(mktemp)
		qemu-img dd if="$ROOTFSFILE" of="$tmpfile" count=4
		eval "$(/sbin/blkid -o export -- "$tmpfile")"
		rm $tmpfile
	elif [ "$FORMAT" = "raw" ]; then
		eval "$(/sbin/blkid -o export -- "$ROOTFSFILE")"
	else
		echo "Error: Image '$ROOTFSFILE' in unsupported format '$FORMAT'."
		exit 1
	fi
	if [[ ! "${TYPE-}" =~ ^ext[234]$ ]]; then
		echo "Error: ext4 filesystem not found in '$ROOTFSFILE'." >&2
		exit 1
	fi
	OPTS+=" -drive file=$ROOTFS"
	[ "$FORMAT" = "raw" ] && OPTS+=",format=raw"
	[ -w "$ROOTFSFILE" ] || OPTS+=",snapshot=on"
	case "$DRIVE_IF" in
		virtio)
			OPTS+=",if=virtio"
			MODULES+=" virtio_blk"
			;;
		scsi)
			OPTS+=",if=none,id=sd0 -device virtio-scsi-pci -device scsi-hd,drive=sd0"
			MODULES+=" virtio_scsi sd_mod"
			;;
		'')
			MODULES+=" sd_mod ata_piix"
			[ "$HOSTTYPE" = powerpc64le ] && MODULES+=" ibmvscsi"
			;;
	esac
	APPEND+=" root=UUID=$UUID rootfstype=$TYPE"
	[ -n "$NOBIND" ] || printf '#  CMD: V mount --bind /mnt/9p/usr/src /usr/src\n' >> $SCRIPT
	unset FORMAT ROOTFSFILE
fi
# We shall load these modules even though we're using ext4 for rootfe
# (but supposedly we can mount 9p later and modprobe before that).
# It's because we need to access SCRIPT= (to read MODPROBE_OPTIONS)
# which could be (and will be) under /usr/src, but we bind mount it
# from 9p:/, thus 9p modules should be already loaded.
MODULES+=" 9p 9pnet_virtio"

# Sorted by preference (%buildroot first) and mtime (newer first)
list_kernels() {
	(
		set +ef
		# Installed kernels have highest priority.
		ls -t ${RPM_BUILD_ROOT-/usr/src/tmp/*-buildroot}/boot/vmlinu[xz]-*

		# Just built kernels in build dir have medium priority.
		builddir=${RPM_BUILD_DIR-/usr/src/RPM/BUILD}
		kbuilddir=$(find "$builddir" -depth -maxdepth 3 -type f -name MAINTAINERS -print -quit)
		kbuilddir=${kbuilddir%/*}
		KBZ=$(find $kbuilddir/arch/*/boot -name '*Image' -type f)
		# Raw vmlinux frequently do not work, with error:
		# qemu-system-x86_64: Error loading uncompressed kernel without PVH ELF Note
		KBD=$(find $kbuilddir -depth -maxdepth 3 -type f -name vmlinux)
		[ -z "$KBD$KBZ" ] || ls -t $KBD $KBZ

		# Kernels from packages have lowest priority.
		ls -t /boot/vmlinu[xz]-*
	) 2>/dev/null
}

list_kernels_ui() {
	if list_kernels | grep -q .; then
		echo "  List of available kernels:" >&2
		list_kernels | sed 's/^/\t/' >&2
	else
		echo "  No kernels found, try to install a kernel first." >&2
	fi
}

guess_kernel() {
	local match=${1-}

	# Better match first.
	list_kernels | grep -s -m1 -e ".*/$match" -x && return
	list_kernels | grep -s -m1 -e    "$match" -w && return
	list_kernels | grep -s -m1 -e    "$match"    && return
	return 0
}

if [ -f "${KERNEL-}" ]; then
	KERN=$(realpath $KERNEL)
elif [ ! -v KERNEL ]; then
	# No --kernel= option.
	KERN=$(guess_kernel)
elif [ -n "$KERNEL" ]; then
	# Non-empty --kernel= option.
	KERN=$(guess_kernel "$KERNEL")
else
	# Empty --kernel= option for easy listing.
	list_kernels_ui
	exit 1
fi

if [ ! -f "$KERN" ]; then
	if [ -n "${KERNEL-}" ]; then
		echo "Error: Cannot find the kernel matching '$KERNEL'." >&2
	else
		echo "Error: Cannot find a kernel, try to use '--kernel=' option." >&2
	fi
	list_kernels_ui
	exit 1
fi
KERNEL=$KERN
unset KERN

ROOT=${KERNEL%%/boot/*}
if [ -n "$ROOT" ]; then
	# Two spaces to defend against accidental injection, since
	# command is '%q'-escaped and cannot contain consecutive spaces.
	printf '#  MODPROBE_OPTIONS=%q\n' "--dirname=$ROOT" >> $SCRIPT
fi

cleanup_depmod() {
	if [ -v TMP_DEPMOD -a -e "$TMP_DEPMOD" ]; then
		[ -n "$VERBOSE" ] && echo >&2 "Undoing temporary depmod."
		tar xf "$TMP_DEPMOD" -C / 2>/dev/null
		rm "$TMP_DEPMOD"
		unset TMP_DEPMOD
	fi
	exit "$@"
}

# Generate initramfs.
if [ ! -f "${INITRD-}" ]; then
	# For kernel in build dir.
	if [ -z "${KERNEL##/usr/src/RPM/BUILD/*}" ]; then
		ROOT=${TMPDIR-/tmp}
		KSRC=${KERNEL%/*}
		KSRC=${KSRC%/arch/*}
		cd $KSRC
		unset KSRC
		# Override bogus MAKEFLAGS options (such as `-w`).
		KVER=$(MAKEFLAGS=-s make kernelrelease | tail -1)
		mkdir -p "$ROOT/lib/modules"
		if [ "$(readlink "$ROOT/lib/modules/$KVER")" != "$PWD" ]; then
			( set -x; ln -snf "$PWD" "$ROOT/lib/modules/$KVER" )
		fi
		( set -x; /sbin/depmod -b "$ROOT" "$KVER" )
		cd $OLDPWD
		printf '#  MODPROBE_OPTIONS=%q\n' "--dirname=$ROOT" >> $SCRIPT
	else
		# Kernel version.
		KVER=${KERNEL##*/vmlinu[xz]-}
		if [ ! -d "$ROOT/lib/modules/$KVER" ]; then
			echo "Error: Cannot find $ROOT/lib/modules/$KVER for your kernel." >&2
			echo "       Please, install the kernel or make modules_install!"  >&2
			exit 1
		fi
	fi
	if [ ! -s "$ROOT/lib/modules/$KVER/modules.dep.bin" ]; then
		if [ -w "$ROOT/lib/modules/$KVER" ]; then
			if [ -z "$DEPMOD" ] && [[ "$ROOT" =~ buildroot ]]; then
				[ -n "$VERBOSE" ] && echo >&2 "Running temporary depmod (will undo later)."
				TMP_DEPMOD="${TMPDIR-/tmp}/depmod-$KVER-$$.tgz"
				trap 'cleanup_depmod $?' EXIT
				(set +f;
				tar zcf $TMP_DEPMOD "$ROOT/lib/modules/$KVER"/modules.* 2>/dev/null)
			fi
			( set -x; /sbin/depmod ${ROOT:+-b $ROOT} $KVER )
		else
			echo "Error: No valid 'modules.dep.bin' in $ROOT/lib/modules/$KVER"  >&2
			echo "       which is also not writable directory. As a result 'modprobe' will not work!"  >&2
			exit 1
		fi
	fi
	INITRD=${TMPDIR:-/tmp}/initramfs-$KVER.img
	CPIO=$(mktemp -d)
	[ "$VIRTIOBUS" = "pci" ] && MODULES+=" virtio_pci" || MODULES+=" virtio_mmio"
	if ! /sbin/modprobe -d "$ROOT" -S "$KVER" -D -a $MODULES > "$CPIO/modprobe.txt"; then
		echo "Error: modprobe failure." >&2
		if [ ! -s "$ROOT/lib/modules/$KVER/modules.dep.bin" ]; then
			[ -w "$ROOT/lib/modules/$KVER/" ] && HELP= \
				|| HELP=" under rooter"
			echo "  Run 'depmod${ROOT:+ -b $ROOT} $KVER'$HELP." >&2
		fi
		exit 1
	fi
	while read skip f; do
		[ -n "$VERBOSE" ] && echo >&2 "initrd: Adding module $f"
		bn=${f##*/}
		un=${bn%.?z}
		[ -e "$CPIO/$un" ] && continue
		cp -au "$f" "$CPIO/" 2>/dev/null || continue
		case "$bn" in
			*.gz) gzip -qd "$CPIO/$bn" ;;
			*.xz) xz   -qd "$CPIO/$bn" ;;
		esac
		printf '%s\n' "$un" >&3
	done < "$CPIO/modprobe.txt" \
		3> "$CPIO/modules.conf"
	cp -au /usr/lib/vm-run/initrd-init "$CPIO/init"
	rm "$CPIO/modprobe.txt"
	(cd "$CPIO"; find . | cpio -o -H newc --quiet -R 0:0 | gzip) > "$INITRD"
	rm -rf "$CPIO"
	unset CPIO MODULES KVER skip f bn un
fi
unset ROOT

if [ -v LOGLEVEL ]; then
	QUIET=
	if [[ "$LOGLEVEL" =~ ^[[:digit:]]+$ ]]; then
		APPEND+=" loglevel=$LOGLEVEL"
	else
		APPEND+=" earlyprintk=serial ignore_loglevel"
	fi

fi
# QEMU Monitor is available (through character backend multiplexer), keys:
#   C-a h    print this help
#   C-a x    exit emulator
#   C-a s    save disk data back to file (if -snapshot)
#   C-a t    toggle console timestamps
#   C-a b    send break (magic sysrq)
#   C-a c    switch between console and monitor
#   C-a C-a  sends C-a
#
# QEMU Monitor help: https://qemu-project.gitlab.io/qemu/system/monitor.html
#
# For example, to send Magic-SysRq-Help press: C-a b h
# or using monitor command: sendkey alt-sysrq-h
#   sysrq: HELP : loglevel(0-9) reboot(b) crash(c) terminate-all-tasks(e)
#   memory-full-oom-kill(f) kill-all-tasks(i) thaw-filesystems(j) sak(k)
#   show-backtrace-all-active-cpus(l) show-memory-usage(m) nice-all-RT-tasks(n)
#   poweroff(o) show-registers(p) show-all-timers(q) unraw(r) sync(s)
#   show-task-states(t) unmount(u) show-blocked-tasks(w) dump-ftrace-buffer(z)
#

set +e
# -serial mon:stdio  to make ^C not break qemu
# -device virtio-rng-pci  for virtio-rng
(
	# Provide more debugging info on qemu crashes.
	grep -sq systemd-coredump /proc/sys/kernel/core_pattern && ulimit -c unlimited
	test "$NOCMD" || set -x
	$TIME \
	$QEMU \
		$DEF \
		-nodefaults \
		-nographic \
		-no-reboot \
		-fsdev local,id=root,path=/,security_model=none,multidevs=$MULTIDEVS \
		-device virtio-9p-$VIRTIOBUS,fsdev=root,mount_tag=virtio-9p:/ \
		-device virtio-rng-$VIRTIOBUS \
		-serial mon:stdio \
		-kernel $KERNEL \
		-initrd $INITRD \
		$OPTS \
		-append "console=$CONSOLE mitigations=off nokaslr $QUIET panic=-1 SCRIPT=$SCRIPT$APPEND"
)
declare -i ret=$?
set -e
if [ $ret -ge 132 -a $ret -le 159 ]; then
	echo >&2 "  NOTICE: This is crash of $QEMU, not of the Linux kernel!"
	if grep -sq systemd-coredump /proc/sys/kernel/core_pattern; then
		echo >&2 "  NOTICE: Perhaps, issue 'coredumpctl info' for details."
	fi
fi
if [ $ret -gt 0 ]; then
	# Exit due to qemu reasons.
	exit $ret
fi

# Temporary script is not deleted intentionally.
if [ -s $SCRIPT.ret ]; then
	# Exit due to script reasons.
	read ret < $SCRIPT.ret
	exit $ret
else
	# Possible kernel crash or C-a x
	echo "  Error: no exit code is found, failure." >&2
	exit 1
fi
